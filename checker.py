
new_checker = '''
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
import time
import pickle
import os

COOKIES_FILE = "cookies.pkl"

def login_and_save_cookies(driver):
    driver.get("https://seller.wildberries.ru/")
    input("üîê –í–≤–µ–¥–∏ –°–ú–°-–∫–æ–¥ –≤—Ä—É—á–Ω—É—é –≤ –æ—Ç–∫—Ä—ã–≤—à–µ–º—Å—è –æ–∫–Ω–µ, –ø–æ—Ç–æ–º –Ω–∞–∂–º–∏ Enter –∑–¥–µ—Å—å...")

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞
    with open(COOKIES_FILE, "wb") as file:
        pickle.dump(driver.get_cookies(), file)
    print("‚úÖ –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã. –¢–µ–ø–µ—Ä—å –±–æ—Ç –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")

def load_cookies(driver):
    if not os.path.exists(COOKIES_FILE):
        return False
    with open(COOKIES_FILE, "rb") as file:
        cookies = pickle.load(file)
        for cookie in cookies:
            driver.add_cookie(cookie)
    return True

def check_slots_and_book():
    options = Options()
    options.add_argument("--headless")
    options.add_argument("--no-sandbox")
    options.add_argument("--disable-dev-shm-usage")
    driver = webdriver.Chrome(options=options)

    try:
        driver.get("https://seller.wildberries.ru/")
        time.sleep(2)

        # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫—É–∫–∏
        if os.path.exists(COOKIES_FILE):
            driver.get("https://seller.wildberries.ru/")
            time.sleep(2)
            load_cookies(driver)
            driver.refresh()
            time.sleep(3)
        else:
            login_and_save_cookies(driver)
            return "‚úÖ –ü–µ—Ä–≤—ã–π –≤—Ö–æ–¥ –≤—ã–ø–æ–ª–Ω–µ–Ω. –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã."

        driver.get("https://seller.wildberries.ru/fbo/slots")
        time.sleep(5)

        slots = driver.find_elements(By.CLASS_NAME, "slot-free")
        if slots:
            slots[0].click()
            return "‚úÖ –ù–∞–π–¥–µ–Ω —Å–≤–æ–±–æ–¥–Ω—ã–π —Å–ª–æ—Ç –∏ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω!"
        else:
            return "‚è≥ –°–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç."

    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}"
    finally:
        driver.quit()
'''

checker_path = "/mnt/data/checker.py"
with open(checker_path, "w", encoding="utf-8") as f:
    f.write(new_checker)

checker_path
